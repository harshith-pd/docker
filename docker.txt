Docker
- develop, build and test portable applications



----- Docker uses a client-server architecture
docker__|—— DOCKER CLIENT : the docker command
engine  |—— DOCKER DAEMON : a service that has to be running for the containers to 			work. It handles all the operations related to containers, receives 			commands from the docker client
----- DOCKER IMAGES : build products of the docker file, the building blocks that produce a running container when used as docker run, every command/change is added as a layer on top of the previous/existing image
----- DOCKER FILE : file consisting of the commands the user calls for assembling the  docker image
----- CONTAINER : a working instance of a docker image
----- DOCKER REGISTRY : its like a repository of docker images like GitHub for code repositories

During the run command
 1. The Docker client contacts the Docker daemon.
 2. The Docker daemon pulls the "xyz" image from the Docker Hub.
 3. The Docker daemon creats a new container from that image which runs the
    executable that produces the output
 4. The Docker daemon streams that output to the Docker client, which sends it
    to your terminal as output.


NOTE: everywhere the mapping occurs, the format is <host> <container>

Common docker commands:
Installation:
brew cask install docker  ----- installs complete docker set : docker command, docker-machine, docker-compose

docker version
docker run hello-world
docker ps 

Build the docker file with name
search for the docker image
Pull the docker image
Run the docker image
Remove the docker image

--------------------------------------------------
DOCKER BUILD…
— docker build -t <image_name>:<tag_name/version_name> 
# this builds the DockerFile in the folder
- once the image is built, we will be able to see the same in the docker images command
— create a repository in the hub.docker.com 
— do a docker pull of the created repository : docker pull <user>/<repo_name>
— do a docker login with your creds : docker login
— tag you created docker image : docker tag <imageID> <user_name>/<repo_name>:<version_name>
— push it to the repository : docker push <ueser_name>/<repo_name>:<version_name>

--------------------------------------------------
Docker file …
Commands:
— FROM : the base image : FROM <image_tag_name>
— MAINTAINER : the image/file maintainer for the docker file : MAINTAINER <maintainer_email_id>
— CMD : run commands on the image when launched : CMD [“echo”,”hello”]
— ENTRYPOINT : run command on the image when launched by passing args during run  : ENTRYPOINT [“echo”], docker run <image> “hello”
— ENV : set environment variables : ENV var1=“tuts” var2=“plus” , WORKDIR ${var1}
— WORKDIR : set/create the work directory to the pwd : WORKDIR /var/jenkins_home
— RUN : run the shell commands 
— ADD
— COPY
— EXPOSE : expose a particular port : EXPOSE 80/tcp
— VOLUME : 
— USER
— LABEL

All the parameters specified in the docker file can be overridden in the docker run command
--------------------------------------------------
DOCKER RUN...

-- docker run -d #run the container detached, in the background
	     	-p 80:80 # publish the container ports to the host, -P to publish all container ports to random host ports
		--name <name of the container> # this is going to list the name of the container in the ps
		<image name>	
-- Once started, all the operations related to the container are worked upon using the docker container command:
-docker container ls
-Docker container stop/start/rm/ls <container name>
-docker 

---------------------------------------------------


Advtg.
1) no inconsistencies, if it works on my comp, it runs on any comp with docker
2) sandboxing of application
3) pre-requisites resolved
4) no hassle of running and maintaining VMs
5) can be spun up in minutes
6) use less space & fewer resources

Features
1) docker uses the special features of the UNIX file system(it simply creates the unix file system) by sharing the kernel to create these isolated environments
2) Docker file is built up to create an image = Base OS + software dependencies + software
3) then these images are run to create container


———————————————————————————
Differences between VMs and dockers

Jargon:
- A hypervisor is a piece of software, firmware, or hardware that VMs run on top of, they run on top of host machines which provide them the RAM and CPU resources(so, the VM is also referred to as the guest machine)
- hosted hypervisor : like virtual box
- bare metal hypervisor : XenServer where the guest machine directly interfaces with the host hardware
- VM has own OS sitting on top of the hypervisor which in turn sits on the host OS
- therefore, VM = guestOS(kernel)+user_space(bin/libs + application)
- and container = user-space(bin/libs + application)

